// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.32.1
// source: api/onec/omec.proto

// edition = "2023";

package onec

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Определение перечисления CustomerType
type CustomerType int32

const (
	CustomerType_DEBTOR       CustomerType = 0
	CustomerType_COUNTERPARTY CustomerType = 1
)

// Enum value maps for CustomerType.
var (
	CustomerType_name = map[int32]string{
		0: "DEBTOR",
		1: "COUNTERPARTY",
	}
	CustomerType_value = map[string]int32{
		"DEBTOR":       0,
		"COUNTERPARTY": 1,
	}
)

func (x CustomerType) Enum() *CustomerType {
	p := new(CustomerType)
	*p = x
	return p
}

func (x CustomerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomerType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_onec_omec_proto_enumTypes[0].Descriptor()
}

func (CustomerType) Type() protoreflect.EnumType {
	return &file_api_onec_omec_proto_enumTypes[0]
}

func (x CustomerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomerType.Descriptor instead.
func (CustomerType) EnumDescriptor() ([]byte, []int) {
	return file_api_onec_omec_proto_rawDescGZIP(), []int{0}
}

type ParseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Уникальный идентификатор запроса
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Ссылка на файл, который нужно распарсить
	FileUrl string `protobuf:"bytes,2,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	// Тип клиента, для которого выполняется парсинг
	CustomerType CustomerType `protobuf:"varint,3,opt,name=customer_type,json=customerType,proto3,enum=onec.CustomerType" json:"customer_type,omitempty"`
	// Заказчик
	CreatorId uint64 `protobuf:"varint,4,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	// Должник
	DebtorId *uint64 `protobuf:"varint,5,opt,name=debtor_id,json=debtorId,proto3,oneof" json:"debtor_id,omitempty"`
	// РасчСчет
	Account       *string `protobuf:"bytes,6,opt,name=account,proto3,oneof" json:"account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseRequest) Reset() {
	*x = ParseRequest{}
	mi := &file_api_onec_omec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseRequest) ProtoMessage() {}

func (x *ParseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_onec_omec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseRequest.ProtoReflect.Descriptor instead.
func (*ParseRequest) Descriptor() ([]byte, []int) {
	return file_api_onec_omec_proto_rawDescGZIP(), []int{0}
}

func (x *ParseRequest) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *ParseRequest) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *ParseRequest) GetCustomerType() CustomerType {
	if x != nil {
		return x.CustomerType
	}
	return CustomerType_DEBTOR
}

func (x *ParseRequest) GetCreatorId() uint64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *ParseRequest) GetDebtorId() uint64 {
	if x != nil && x.DebtorId != nil {
		return *x.DebtorId
	}
	return 0
}

func (x *ParseRequest) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

type ParseResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Уникальный идентификатор запроса
	RequestId    []byte       `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	CustomerType CustomerType `protobuf:"varint,2,opt,name=customer_type,json=customerType,proto3,enum=onec.CustomerType" json:"customer_type,omitempty"`
	// Types that are valid to be assigned to Item:
	//
	//	*ParseResponse_File
	//	*ParseResponse_Balance
	//	*ParseResponse_Document
	Item isParseResponse_Item `protobuf_oneof:"item"`
	// Ссылка на распарсенный файл
	FileUrl string `protobuf:"bytes,7,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	// Заказчик
	CreatorId uint64 `protobuf:"varint,8,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	// Должник
	DebtorId      *uint64 `protobuf:"varint,9,opt,name=debtor_id,json=debtorId,proto3,oneof" json:"debtor_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseResponse) Reset() {
	*x = ParseResponse{}
	mi := &file_api_onec_omec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseResponse) ProtoMessage() {}

func (x *ParseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_onec_omec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseResponse.ProtoReflect.Descriptor instead.
func (*ParseResponse) Descriptor() ([]byte, []int) {
	return file_api_onec_omec_proto_rawDescGZIP(), []int{1}
}

func (x *ParseResponse) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *ParseResponse) GetCustomerType() CustomerType {
	if x != nil {
		return x.CustomerType
	}
	return CustomerType_DEBTOR
}

func (x *ParseResponse) GetItem() isParseResponse_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ParseResponse) GetFile() *ExchangeFile {
	if x != nil {
		if x, ok := x.Item.(*ParseResponse_File); ok {
			return x.File
		}
	}
	return nil
}

func (x *ParseResponse) GetBalance() *AccountBalance {
	if x != nil {
		if x, ok := x.Item.(*ParseResponse_Balance); ok {
			return x.Balance
		}
	}
	return nil
}

func (x *ParseResponse) GetDocument() *PaymentDocument {
	if x != nil {
		if x, ok := x.Item.(*ParseResponse_Document); ok {
			return x.Document
		}
	}
	return nil
}

func (x *ParseResponse) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *ParseResponse) GetCreatorId() uint64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *ParseResponse) GetDebtorId() uint64 {
	if x != nil && x.DebtorId != nil {
		return *x.DebtorId
	}
	return 0
}

type isParseResponse_Item interface {
	isParseResponse_Item()
}

type ParseResponse_File struct {
	File *ExchangeFile `protobuf:"bytes,3,opt,name=file,proto3,oneof"`
}

type ParseResponse_Balance struct {
	Balance *AccountBalance `protobuf:"bytes,5,opt,name=balance,proto3,oneof"`
}

type ParseResponse_Document struct {
	Document *PaymentDocument `protobuf:"bytes,6,opt,name=document,proto3,oneof"`
}

func (*ParseResponse_File) isParseResponse_Item() {}

func (*ParseResponse_Balance) isParseResponse_Item() {}

func (*ParseResponse_Document) isParseResponse_Item() {}

// ExchangeFile holds the metadata of a 1C-ClientBank exchange file.
type ExchangeFile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// ВерсияФормата
	FormatVer string `protobuf:"bytes,2,opt,name=format_ver,json=formatVer,proto3" json:"format_ver,omitempty"`
	// Кодировка
	Encoding string `protobuf:"bytes,3,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// Отправитель
	Sender string `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	// Получатель
	Receiver string `protobuf:"bytes,5,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// ДатаСоздания (DD.MM.YYYY HH:MM:SS)
	CreatedDatetime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_datetime,json=createdDatetime,proto3" json:"created_datetime,omitempty"`
	// ДатаНачала (DD.MM.YYYY)
	StartDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// ДатаКонца (DD.MM.YYYY)
	EndDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// РасчСчет — список расчётных счетов
	Account       []string `protobuf:"bytes,9,rep,name=account,proto3" json:"account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExchangeFile) Reset() {
	*x = ExchangeFile{}
	mi := &file_api_onec_omec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeFile) ProtoMessage() {}

func (x *ExchangeFile) ProtoReflect() protoreflect.Message {
	mi := &file_api_onec_omec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeFile.ProtoReflect.Descriptor instead.
func (*ExchangeFile) Descriptor() ([]byte, []int) {
	return file_api_onec_omec_proto_rawDescGZIP(), []int{2}
}

func (x *ExchangeFile) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExchangeFile) GetFormatVer() string {
	if x != nil {
		return x.FormatVer
	}
	return ""
}

func (x *ExchangeFile) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *ExchangeFile) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *ExchangeFile) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *ExchangeFile) GetCreatedDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDatetime
	}
	return nil
}

func (x *ExchangeFile) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ExchangeFile) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ExchangeFile) GetAccount() []string {
	if x != nil {
		return x.Account
	}
	return nil
}

// AccountBalance represents opening and closing balances for an account.
type AccountBalance struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExchangeFileId uint64                 `protobuf:"varint,2,opt,name=exchange_file_id,json=exchangeFileId,proto3" json:"exchange_file_id,omitempty"`
	// ДатаНачала (DD.MM.YYYY)
	StartDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// ДатаКонца (DD.MM.YYYY)
	EndDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// РасчСчет
	Account string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	// НачальныйОстаток
	InitialBalance float64 `protobuf:"fixed64,6,opt,name=initial_balance,json=initialBalance,proto3" json:"initial_balance,omitempty"`
	// ВсегоПоступило
	Income float64 `protobuf:"fixed64,7,opt,name=income,proto3" json:"income,omitempty"`
	// ВсегоСписано
	WriteOff float64 `protobuf:"fixed64,8,opt,name=write_off,json=writeOff,proto3" json:"write_off,omitempty"`
	// КонечныйОстаток
	FinalBalance  float64 `protobuf:"fixed64,9,opt,name=final_balance,json=finalBalance,proto3" json:"final_balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountBalance) Reset() {
	*x = AccountBalance{}
	mi := &file_api_onec_omec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalance) ProtoMessage() {}

func (x *AccountBalance) ProtoReflect() protoreflect.Message {
	mi := &file_api_onec_omec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalance.ProtoReflect.Descriptor instead.
func (*AccountBalance) Descriptor() ([]byte, []int) {
	return file_api_onec_omec_proto_rawDescGZIP(), []int{3}
}

func (x *AccountBalance) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccountBalance) GetExchangeFileId() uint64 {
	if x != nil {
		return x.ExchangeFileId
	}
	return 0
}

func (x *AccountBalance) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *AccountBalance) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *AccountBalance) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AccountBalance) GetInitialBalance() float64 {
	if x != nil {
		return x.InitialBalance
	}
	return 0
}

func (x *AccountBalance) GetIncome() float64 {
	if x != nil {
		return x.Income
	}
	return 0
}

func (x *AccountBalance) GetWriteOff() float64 {
	if x != nil {
		return x.WriteOff
	}
	return 0
}

func (x *AccountBalance) GetFinalBalance() float64 {
	if x != nil {
		return x.FinalBalance
	}
	return 0
}

// PaymentDocument представляет одну запись документа обмена.
type PaymentDocument struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AccountBalanceId uint64                 `protobuf:"varint,1,opt,name=account_balance_id,json=accountBalanceId,proto3" json:"account_balance_id,omitempty"`
	// СекцияДокумент
	DocumentType string `protobuf:"bytes,2,opt,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	// Номер
	Number string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	// Дата
	Date *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// ДатаСписано
	WrittenOffDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=written_off_date,json=writtenOffDate,proto3,oneof" json:"written_off_date,omitempty"`
	// ДатаПоступило
	IncomeDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=income_date,json=incomeDate,proto3,oneof" json:"income_date,omitempty"`
	// Сумма
	Summ float64 `protobuf:"fixed64,7,opt,name=summ,proto3" json:"summ,omitempty"`
	// КвитанцияДата + КвитанцияВремя (DD.MM.YYYY HH:MM:SS)
	RectDatetime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=rect_datetime,json=rectDatetime,proto3,oneof" json:"rect_datetime,omitempty"`
	// КвитанцияСодержание
	RectContent *string `protobuf:"bytes,10,opt,name=rect_content,json=rectContent,proto3,oneof" json:"rect_content,omitempty"`
	// ПлательщикСчет
	PayerAccount string `protobuf:"bytes,11,opt,name=payer_account,json=payerAccount,proto3" json:"payer_account,omitempty"`
	// Плательщик
	Payer string `protobuf:"bytes,12,opt,name=payer,proto3" json:"payer,omitempty"`
	// ПлательщикИНН
	PayerInn string `protobuf:"bytes,13,opt,name=payer_inn,json=payerInn,proto3" json:"payer_inn,omitempty"`
	// ПлательщикКПП
	PayerKpp *string `protobuf:"bytes,14,opt,name=payer_kpp,json=payerKpp,proto3,oneof" json:"payer_kpp,omitempty"`
	// Плательщик1…4
	Payer1 *string `protobuf:"bytes,16,opt,name=payer1,proto3,oneof" json:"payer1,omitempty"`
	Payer2 *string `protobuf:"bytes,17,opt,name=payer2,proto3,oneof" json:"payer2,omitempty"`
	Payer3 *string `protobuf:"bytes,18,opt,name=payer3,proto3,oneof" json:"payer3,omitempty"`
	Payer4 *string `protobuf:"bytes,19,opt,name=payer4,proto3,oneof" json:"payer4,omitempty"`
	// ПлательщикРасчСчет
	PayerCurrentAccount string `protobuf:"bytes,20,opt,name=payer_current_account,json=payerCurrentAccount,proto3" json:"payer_current_account,omitempty"`
	// ПлательщикБанк1…2
	PayerBank1 string  `protobuf:"bytes,21,opt,name=payer_bank1,json=payerBank1,proto3" json:"payer_bank1,omitempty"`
	PayerBank2 *string `protobuf:"bytes,22,opt,name=payer_bank2,json=payerBank2,proto3,oneof" json:"payer_bank2,omitempty"`
	// ПлательщикБИК
	PayerBik string `protobuf:"bytes,23,opt,name=payer_bik,json=payerBik,proto3" json:"payer_bik,omitempty"`
	// ПлательщикКорсчет
	PayerCorrAccount string `protobuf:"bytes,24,opt,name=payer_corr_account,json=payerCorrAccount,proto3" json:"payer_corr_account,omitempty"`
	// ПолучательСчет
	ReceiverAccount string `protobuf:"bytes,25,opt,name=receiver_account,json=receiverAccount,proto3" json:"receiver_account,omitempty"`
	// Получатель
	Receiver string `protobuf:"bytes,26,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// ПолучательИНН
	ReceiverInn string `protobuf:"bytes,27,opt,name=receiver_inn,json=receiverInn,proto3" json:"receiver_inn,omitempty"`
	// ПолучательКПП
	ReceiverKpp *string `protobuf:"bytes,28,opt,name=receiver_kpp,json=receiverKpp,proto3,oneof" json:"receiver_kpp,omitempty"`
	// Получатель1…4
	Receiver1 *string `protobuf:"bytes,29,opt,name=receiver1,proto3,oneof" json:"receiver1,omitempty"`
	Receiver2 *string `protobuf:"bytes,30,opt,name=receiver2,proto3,oneof" json:"receiver2,omitempty"`
	Receiver3 *string `protobuf:"bytes,31,opt,name=receiver3,proto3,oneof" json:"receiver3,omitempty"`
	Receiver4 *string `protobuf:"bytes,32,opt,name=receiver4,proto3,oneof" json:"receiver4,omitempty"`
	// ПолучательРасчСчет
	ReceiverCurrentAccount string `protobuf:"bytes,33,opt,name=receiver_current_account,json=receiverCurrentAccount,proto3" json:"receiver_current_account,omitempty"`
	// ПолучательБанк1…2
	ReceiverBank1 string  `protobuf:"bytes,34,opt,name=receiver_bank1,json=receiverBank1,proto3" json:"receiver_bank1,omitempty"`
	ReceiverBank2 *string `protobuf:"bytes,35,opt,name=receiver_bank2,json=receiverBank2,proto3,oneof" json:"receiver_bank2,omitempty"`
	// ПолучательБИК
	ReceiverBik string `protobuf:"bytes,36,opt,name=receiver_bik,json=receiverBik,proto3" json:"receiver_bik,omitempty"`
	// ПолучательКорсчет
	ReceiverCorrAccount string `protobuf:"bytes,37,opt,name=receiver_corr_account,json=receiverCorrAccount,proto3" json:"receiver_corr_account,omitempty"`
	// ВидПлатежа
	PaymentType *string `protobuf:"bytes,38,opt,name=payment_type,json=paymentType,proto3,oneof" json:"payment_type,omitempty"`
	// КодНазПлатежа
	PaymentPurposeCode *string `protobuf:"bytes,39,opt,name=payment_purpose_code,json=paymentPurposeCode,proto3,oneof" json:"payment_purpose_code,omitempty"`
	// Код (UIN)
	Uin *string `protobuf:"bytes,40,opt,name=uin,proto3,oneof" json:"uin,omitempty"`
	// НазначениеПлатежа
	PaymentPurpose string `protobuf:"bytes,41,opt,name=payment_purpose,json=paymentPurpose,proto3" json:"payment_purpose,omitempty"`
	// НазначениеПлатежа1…6
	PaymentPurpose1 *string `protobuf:"bytes,42,opt,name=payment_purpose1,json=paymentPurpose1,proto3,oneof" json:"payment_purpose1,omitempty"`
	PaymentPurpose2 *string `protobuf:"bytes,43,opt,name=payment_purpose2,json=paymentPurpose2,proto3,oneof" json:"payment_purpose2,omitempty"`
	PaymentPurpose3 *string `protobuf:"bytes,44,opt,name=payment_purpose3,json=paymentPurpose3,proto3,oneof" json:"payment_purpose3,omitempty"`
	PaymentPurpose4 *string `protobuf:"bytes,45,opt,name=payment_purpose4,json=paymentPurpose4,proto3,oneof" json:"payment_purpose4,omitempty"`
	PaymentPurpose5 *string `protobuf:"bytes,46,opt,name=payment_purpose5,json=paymentPurpose5,proto3,oneof" json:"payment_purpose5,omitempty"`
	PaymentPurpose6 *string `protobuf:"bytes,47,opt,name=payment_purpose6,json=paymentPurpose6,proto3,oneof" json:"payment_purpose6,omitempty"`
	// СтатусСоставителя
	CompilerStatus *string `protobuf:"bytes,48,opt,name=compiler_status,json=compilerStatus,proto3,oneof" json:"compiler_status,omitempty"`
	// ОКАТО
	Okato *string `protobuf:"bytes,49,opt,name=okato,proto3,oneof" json:"okato,omitempty"`
	// ПоказательКБК
	IndicatorKbk *string `protobuf:"bytes,50,opt,name=indicator_kbk,json=indicatorKbk,proto3,oneof" json:"indicator_kbk,omitempty"`
	// ПоказательОснования
	IndicatorBasics *string `protobuf:"bytes,51,opt,name=indicator_basics,json=indicatorBasics,proto3,oneof" json:"indicator_basics,omitempty"`
	// ПоказательПериода
	IndicatorPeriod *string `protobuf:"bytes,52,opt,name=indicator_period,json=indicatorPeriod,proto3,oneof" json:"indicator_period,omitempty"`
	// ПоказательНомера
	IndicatorNumber *string `protobuf:"bytes,53,opt,name=indicator_number,json=indicatorNumber,proto3,oneof" json:"indicator_number,omitempty"`
	// ПоказательДаты
	IndicatorDate *timestamppb.Timestamp `protobuf:"bytes,54,opt,name=indicator_date,json=indicatorDate,proto3,oneof" json:"indicator_date,omitempty"`
	// ПоказательТипа
	IndicatorType *string `protobuf:"bytes,55,opt,name=indicator_type,json=indicatorType,proto3,oneof" json:"indicator_type,omitempty"`
	// Очередность
	Priority *uint32 `protobuf:"varint,56,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	// ВидОплаты
	DefrayalType *string `protobuf:"bytes,57,opt,name=defrayal_type,json=defrayalType,proto3,oneof" json:"defrayal_type,omitempty"`
	// СрокАкцепта
	AcceptanceTerm *string `protobuf:"bytes,58,opt,name=acceptance_term,json=acceptanceTerm,proto3,oneof" json:"acceptance_term,omitempty"`
	// ВидАккредитива
	TypeLetterCredit *string `protobuf:"bytes,59,opt,name=type_letter_credit,json=typeLetterCredit,proto3,oneof" json:"type_letter_credit,omitempty"`
	// СрокПлатежа
	PaymentTerm *string `protobuf:"bytes,60,opt,name=payment_term,json=paymentTerm,proto3,oneof" json:"payment_term,omitempty"`
	// УсловиеОплаты1…3
	PaymentCondition1 *string `protobuf:"bytes,61,opt,name=payment_condition1,json=paymentCondition1,proto3,oneof" json:"payment_condition1,omitempty"`
	PaymentCondition2 *string `protobuf:"bytes,62,opt,name=payment_condition2,json=paymentCondition2,proto3,oneof" json:"payment_condition2,omitempty"`
	PaymentCondition3 *string `protobuf:"bytes,63,opt,name=payment_condition3,json=paymentCondition3,proto3,oneof" json:"payment_condition3,omitempty"`
	// ПлатежПоПредст
	PaymentBy *string `protobuf:"bytes,64,opt,name=payment_by,json=paymentBy,proto3,oneof" json:"payment_by,omitempty"`
	// ДополнУсловия
	AdditionalTerms *string `protobuf:"bytes,65,opt,name=additional_terms,json=additionalTerms,proto3,oneof" json:"additional_terms,omitempty"`
	// НомерСчетаПоставщика
	SupplierAccountNumber *string `protobuf:"bytes,66,opt,name=supplier_account_number,json=supplierAccountNumber,proto3,oneof" json:"supplier_account_number,omitempty"`
	// ДатаОтсылкиДок
	DocumentSendingDate *timestamppb.Timestamp `protobuf:"bytes,67,opt,name=document_sending_date,json=documentSendingDate,proto3,oneof" json:"document_sending_date,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PaymentDocument) Reset() {
	*x = PaymentDocument{}
	mi := &file_api_onec_omec_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentDocument) ProtoMessage() {}

func (x *PaymentDocument) ProtoReflect() protoreflect.Message {
	mi := &file_api_onec_omec_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentDocument.ProtoReflect.Descriptor instead.
func (*PaymentDocument) Descriptor() ([]byte, []int) {
	return file_api_onec_omec_proto_rawDescGZIP(), []int{4}
}

func (x *PaymentDocument) GetAccountBalanceId() uint64 {
	if x != nil {
		return x.AccountBalanceId
	}
	return 0
}

func (x *PaymentDocument) GetDocumentType() string {
	if x != nil {
		return x.DocumentType
	}
	return ""
}

func (x *PaymentDocument) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *PaymentDocument) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *PaymentDocument) GetWrittenOffDate() *timestamppb.Timestamp {
	if x != nil {
		return x.WrittenOffDate
	}
	return nil
}

func (x *PaymentDocument) GetIncomeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IncomeDate
	}
	return nil
}

func (x *PaymentDocument) GetSumm() float64 {
	if x != nil {
		return x.Summ
	}
	return 0
}

func (x *PaymentDocument) GetRectDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.RectDatetime
	}
	return nil
}

func (x *PaymentDocument) GetRectContent() string {
	if x != nil && x.RectContent != nil {
		return *x.RectContent
	}
	return ""
}

func (x *PaymentDocument) GetPayerAccount() string {
	if x != nil {
		return x.PayerAccount
	}
	return ""
}

func (x *PaymentDocument) GetPayer() string {
	if x != nil {
		return x.Payer
	}
	return ""
}

func (x *PaymentDocument) GetPayerInn() string {
	if x != nil {
		return x.PayerInn
	}
	return ""
}

func (x *PaymentDocument) GetPayerKpp() string {
	if x != nil && x.PayerKpp != nil {
		return *x.PayerKpp
	}
	return ""
}

func (x *PaymentDocument) GetPayer1() string {
	if x != nil && x.Payer1 != nil {
		return *x.Payer1
	}
	return ""
}

func (x *PaymentDocument) GetPayer2() string {
	if x != nil && x.Payer2 != nil {
		return *x.Payer2
	}
	return ""
}

func (x *PaymentDocument) GetPayer3() string {
	if x != nil && x.Payer3 != nil {
		return *x.Payer3
	}
	return ""
}

func (x *PaymentDocument) GetPayer4() string {
	if x != nil && x.Payer4 != nil {
		return *x.Payer4
	}
	return ""
}

func (x *PaymentDocument) GetPayerCurrentAccount() string {
	if x != nil {
		return x.PayerCurrentAccount
	}
	return ""
}

func (x *PaymentDocument) GetPayerBank1() string {
	if x != nil {
		return x.PayerBank1
	}
	return ""
}

func (x *PaymentDocument) GetPayerBank2() string {
	if x != nil && x.PayerBank2 != nil {
		return *x.PayerBank2
	}
	return ""
}

func (x *PaymentDocument) GetPayerBik() string {
	if x != nil {
		return x.PayerBik
	}
	return ""
}

func (x *PaymentDocument) GetPayerCorrAccount() string {
	if x != nil {
		return x.PayerCorrAccount
	}
	return ""
}

func (x *PaymentDocument) GetReceiverAccount() string {
	if x != nil {
		return x.ReceiverAccount
	}
	return ""
}

func (x *PaymentDocument) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *PaymentDocument) GetReceiverInn() string {
	if x != nil {
		return x.ReceiverInn
	}
	return ""
}

func (x *PaymentDocument) GetReceiverKpp() string {
	if x != nil && x.ReceiverKpp != nil {
		return *x.ReceiverKpp
	}
	return ""
}

func (x *PaymentDocument) GetReceiver1() string {
	if x != nil && x.Receiver1 != nil {
		return *x.Receiver1
	}
	return ""
}

func (x *PaymentDocument) GetReceiver2() string {
	if x != nil && x.Receiver2 != nil {
		return *x.Receiver2
	}
	return ""
}

func (x *PaymentDocument) GetReceiver3() string {
	if x != nil && x.Receiver3 != nil {
		return *x.Receiver3
	}
	return ""
}

func (x *PaymentDocument) GetReceiver4() string {
	if x != nil && x.Receiver4 != nil {
		return *x.Receiver4
	}
	return ""
}

func (x *PaymentDocument) GetReceiverCurrentAccount() string {
	if x != nil {
		return x.ReceiverCurrentAccount
	}
	return ""
}

func (x *PaymentDocument) GetReceiverBank1() string {
	if x != nil {
		return x.ReceiverBank1
	}
	return ""
}

func (x *PaymentDocument) GetReceiverBank2() string {
	if x != nil && x.ReceiverBank2 != nil {
		return *x.ReceiverBank2
	}
	return ""
}

func (x *PaymentDocument) GetReceiverBik() string {
	if x != nil {
		return x.ReceiverBik
	}
	return ""
}

func (x *PaymentDocument) GetReceiverCorrAccount() string {
	if x != nil {
		return x.ReceiverCorrAccount
	}
	return ""
}

func (x *PaymentDocument) GetPaymentType() string {
	if x != nil && x.PaymentType != nil {
		return *x.PaymentType
	}
	return ""
}

func (x *PaymentDocument) GetPaymentPurposeCode() string {
	if x != nil && x.PaymentPurposeCode != nil {
		return *x.PaymentPurposeCode
	}
	return ""
}

func (x *PaymentDocument) GetUin() string {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return ""
}

func (x *PaymentDocument) GetPaymentPurpose() string {
	if x != nil {
		return x.PaymentPurpose
	}
	return ""
}

func (x *PaymentDocument) GetPaymentPurpose1() string {
	if x != nil && x.PaymentPurpose1 != nil {
		return *x.PaymentPurpose1
	}
	return ""
}

func (x *PaymentDocument) GetPaymentPurpose2() string {
	if x != nil && x.PaymentPurpose2 != nil {
		return *x.PaymentPurpose2
	}
	return ""
}

func (x *PaymentDocument) GetPaymentPurpose3() string {
	if x != nil && x.PaymentPurpose3 != nil {
		return *x.PaymentPurpose3
	}
	return ""
}

func (x *PaymentDocument) GetPaymentPurpose4() string {
	if x != nil && x.PaymentPurpose4 != nil {
		return *x.PaymentPurpose4
	}
	return ""
}

func (x *PaymentDocument) GetPaymentPurpose5() string {
	if x != nil && x.PaymentPurpose5 != nil {
		return *x.PaymentPurpose5
	}
	return ""
}

func (x *PaymentDocument) GetPaymentPurpose6() string {
	if x != nil && x.PaymentPurpose6 != nil {
		return *x.PaymentPurpose6
	}
	return ""
}

func (x *PaymentDocument) GetCompilerStatus() string {
	if x != nil && x.CompilerStatus != nil {
		return *x.CompilerStatus
	}
	return ""
}

func (x *PaymentDocument) GetOkato() string {
	if x != nil && x.Okato != nil {
		return *x.Okato
	}
	return ""
}

func (x *PaymentDocument) GetIndicatorKbk() string {
	if x != nil && x.IndicatorKbk != nil {
		return *x.IndicatorKbk
	}
	return ""
}

func (x *PaymentDocument) GetIndicatorBasics() string {
	if x != nil && x.IndicatorBasics != nil {
		return *x.IndicatorBasics
	}
	return ""
}

func (x *PaymentDocument) GetIndicatorPeriod() string {
	if x != nil && x.IndicatorPeriod != nil {
		return *x.IndicatorPeriod
	}
	return ""
}

func (x *PaymentDocument) GetIndicatorNumber() string {
	if x != nil && x.IndicatorNumber != nil {
		return *x.IndicatorNumber
	}
	return ""
}

func (x *PaymentDocument) GetIndicatorDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IndicatorDate
	}
	return nil
}

func (x *PaymentDocument) GetIndicatorType() string {
	if x != nil && x.IndicatorType != nil {
		return *x.IndicatorType
	}
	return ""
}

func (x *PaymentDocument) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PaymentDocument) GetDefrayalType() string {
	if x != nil && x.DefrayalType != nil {
		return *x.DefrayalType
	}
	return ""
}

func (x *PaymentDocument) GetAcceptanceTerm() string {
	if x != nil && x.AcceptanceTerm != nil {
		return *x.AcceptanceTerm
	}
	return ""
}

func (x *PaymentDocument) GetTypeLetterCredit() string {
	if x != nil && x.TypeLetterCredit != nil {
		return *x.TypeLetterCredit
	}
	return ""
}

func (x *PaymentDocument) GetPaymentTerm() string {
	if x != nil && x.PaymentTerm != nil {
		return *x.PaymentTerm
	}
	return ""
}

func (x *PaymentDocument) GetPaymentCondition1() string {
	if x != nil && x.PaymentCondition1 != nil {
		return *x.PaymentCondition1
	}
	return ""
}

func (x *PaymentDocument) GetPaymentCondition2() string {
	if x != nil && x.PaymentCondition2 != nil {
		return *x.PaymentCondition2
	}
	return ""
}

func (x *PaymentDocument) GetPaymentCondition3() string {
	if x != nil && x.PaymentCondition3 != nil {
		return *x.PaymentCondition3
	}
	return ""
}

func (x *PaymentDocument) GetPaymentBy() string {
	if x != nil && x.PaymentBy != nil {
		return *x.PaymentBy
	}
	return ""
}

func (x *PaymentDocument) GetAdditionalTerms() string {
	if x != nil && x.AdditionalTerms != nil {
		return *x.AdditionalTerms
	}
	return ""
}

func (x *PaymentDocument) GetSupplierAccountNumber() string {
	if x != nil && x.SupplierAccountNumber != nil {
		return *x.SupplierAccountNumber
	}
	return ""
}

func (x *PaymentDocument) GetDocumentSendingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DocumentSendingDate
	}
	return nil
}

var File_api_onec_omec_proto protoreflect.FileDescriptor

var file_api_onec_omec_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e, 0x65, 0x63, 0x2f, 0x6f, 0x6d, 0x65, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6f, 0x6e, 0x65, 0x63, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0,
	0x01, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x6f, 0x6e, 0x65, 0x63, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x22, 0xea, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6f, 0x6e, 0x65, 0x63,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x6e, 0x65, 0x63,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x6e, 0x65, 0x63, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x6e, 0x65, 0x63,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x08, 0x64, 0x65, 0x62,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xe0,
	0x02, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xd9, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xaa, 0x1c,
	0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x10,
	0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x4f, 0x66, 0x66,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x6d,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x75, 0x6d, 0x6d, 0x12, 0x44, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6b, 0x70, 0x70,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x70, 0x61, 0x79, 0x65, 0x72, 0x4b,
	0x70, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x65, 0x72, 0x31, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x70, 0x61, 0x79, 0x65, 0x72, 0x31, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x65, 0x72, 0x32, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x70, 0x61, 0x79, 0x65, 0x72, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x65, 0x72, 0x33, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x06, 0x70, 0x61, 0x79, 0x65, 0x72, 0x33, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x34, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x34, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x31, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x31, 0x12, 0x24,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x32, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x69,
	0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x79, 0x65, 0x72, 0x42, 0x69,
	0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6b, 0x70, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4b, 0x70, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x31, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x32, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x32, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x33, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x33, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x34, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x34, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a,
	0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x31, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x31, 0x12, 0x2a,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x32,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x32, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6b, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x42, 0x69, 0x6b, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52,
	0x03, 0x75, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x31, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x31, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x32, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x32, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x33, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x33, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x34, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x34, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x35, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x35, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x36, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x36, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x6f, 0x6b, 0x61, 0x74, 0x6f, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52,
	0x05, 0x6f, 0x6b, 0x61, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x62, 0x6b, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1b, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x62, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52,
	0x0f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52,
	0x0f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52,
	0x0f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x1f, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x21, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x72,
	0x61, 0x79, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x22, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x72, 0x61, 0x79, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x10,
	0x74, 0x79, 0x70, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x31, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x11, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x28, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x33, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x09, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x15,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x15, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x2c, 0x52, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x6b, 0x70, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x31, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x32, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x33, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x34, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x32, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6b, 0x70, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x31, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x32, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x33, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x34, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x32, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x6e, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x31, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x32, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x33, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x34, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x35, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x36, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x6b, 0x61, 0x74, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x62, 0x6b, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x73,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x64, 0x65, 0x66, 0x72, 0x61, 0x79, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x31, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x33,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x2a, 0x2c, 0x0a, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x42, 0x54, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x01, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x4f, 0x54, 0x42, 0x49, 0x2d, 0x4c, 0x4c, 0x43,
	0x2f, 0x73, 0x6f, 0x74, 0x62, 0x69, 0x2e, 0x6c, 0x69, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x6e, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_onec_omec_proto_rawDescOnce sync.Once
	file_api_onec_omec_proto_rawDescData []byte
)

func file_api_onec_omec_proto_rawDescGZIP() []byte {
	file_api_onec_omec_proto_rawDescOnce.Do(func() {
		file_api_onec_omec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_onec_omec_proto_rawDesc), len(file_api_onec_omec_proto_rawDesc)))
	})
	return file_api_onec_omec_proto_rawDescData
}

var (
	file_api_onec_omec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_api_onec_omec_proto_msgTypes  = make([]protoimpl.MessageInfo, 5)
	file_api_onec_omec_proto_goTypes   = []any{
		(CustomerType)(0),             // 0: onec.CustomerType
		(*ParseRequest)(nil),          // 1: onec.ParseRequest
		(*ParseResponse)(nil),         // 2: onec.ParseResponse
		(*ExchangeFile)(nil),          // 3: onec.ExchangeFile
		(*AccountBalance)(nil),        // 4: onec.AccountBalance
		(*PaymentDocument)(nil),       // 5: onec.PaymentDocument
		(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
	}
)
var file_api_onec_omec_proto_depIdxs = []int32{
	0,  // 0: onec.ParseRequest.customer_type:type_name -> onec.CustomerType
	0,  // 1: onec.ParseResponse.customer_type:type_name -> onec.CustomerType
	3,  // 2: onec.ParseResponse.file:type_name -> onec.ExchangeFile
	4,  // 3: onec.ParseResponse.balance:type_name -> onec.AccountBalance
	5,  // 4: onec.ParseResponse.document:type_name -> onec.PaymentDocument
	6,  // 5: onec.ExchangeFile.created_datetime:type_name -> google.protobuf.Timestamp
	6,  // 6: onec.ExchangeFile.start_date:type_name -> google.protobuf.Timestamp
	6,  // 7: onec.ExchangeFile.end_date:type_name -> google.protobuf.Timestamp
	6,  // 8: onec.AccountBalance.start_date:type_name -> google.protobuf.Timestamp
	6,  // 9: onec.AccountBalance.end_date:type_name -> google.protobuf.Timestamp
	6,  // 10: onec.PaymentDocument.date:type_name -> google.protobuf.Timestamp
	6,  // 11: onec.PaymentDocument.written_off_date:type_name -> google.protobuf.Timestamp
	6,  // 12: onec.PaymentDocument.income_date:type_name -> google.protobuf.Timestamp
	6,  // 13: onec.PaymentDocument.rect_datetime:type_name -> google.protobuf.Timestamp
	6,  // 14: onec.PaymentDocument.indicator_date:type_name -> google.protobuf.Timestamp
	6,  // 15: onec.PaymentDocument.document_sending_date:type_name -> google.protobuf.Timestamp
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_api_onec_omec_proto_init() }
func file_api_onec_omec_proto_init() {
	if File_api_onec_omec_proto != nil {
		return
	}
	file_api_onec_omec_proto_msgTypes[0].OneofWrappers = []any{}
	file_api_onec_omec_proto_msgTypes[1].OneofWrappers = []any{
		(*ParseResponse_File)(nil),
		(*ParseResponse_Balance)(nil),
		(*ParseResponse_Document)(nil),
	}
	file_api_onec_omec_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_onec_omec_proto_rawDesc), len(file_api_onec_omec_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_onec_omec_proto_goTypes,
		DependencyIndexes: file_api_onec_omec_proto_depIdxs,
		EnumInfos:         file_api_onec_omec_proto_enumTypes,
		MessageInfos:      file_api_onec_omec_proto_msgTypes,
	}.Build()
	File_api_onec_omec_proto = out.File
	file_api_onec_omec_proto_goTypes = nil
	file_api_onec_omec_proto_depIdxs = nil
}
