// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/excel_gen/excel_gen.proto

package excel_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExcelGenService_GeneralGenerate_FullMethodName = "/excel_gen.ExcelGenService/GeneralGenerate"
	ExcelGenService_Generate_FullMethodName        = "/excel_gen.ExcelGenService/Generate"
	ExcelGenService_GetStatus_FullMethodName       = "/excel_gen.ExcelGenService/GetStatus"
)

// ExcelGenServiceClient is the client API for ExcelGenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExcelGenServiceClient interface {
	GeneralGenerate(ctx context.Context, in *ExcelGeneralRequest, opts ...grpc.CallOption) (*ExcelGenResponse, error)
	Generate(ctx context.Context, in *ExcelGenRequest, opts ...grpc.CallOption) (*ExcelGenResponse, error)
	GetStatus(ctx context.Context, in *ExcelGenStatusRequest, opts ...grpc.CallOption) (*ExcelGenResponse, error)
}

type excelGenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExcelGenServiceClient(cc grpc.ClientConnInterface) ExcelGenServiceClient {
	return &excelGenServiceClient{cc}
}

func (c *excelGenServiceClient) GeneralGenerate(ctx context.Context, in *ExcelGeneralRequest, opts ...grpc.CallOption) (*ExcelGenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExcelGenResponse)
	err := c.cc.Invoke(ctx, ExcelGenService_GeneralGenerate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelGenServiceClient) Generate(ctx context.Context, in *ExcelGenRequest, opts ...grpc.CallOption) (*ExcelGenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExcelGenResponse)
	err := c.cc.Invoke(ctx, ExcelGenService_Generate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelGenServiceClient) GetStatus(ctx context.Context, in *ExcelGenStatusRequest, opts ...grpc.CallOption) (*ExcelGenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExcelGenResponse)
	err := c.cc.Invoke(ctx, ExcelGenService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExcelGenServiceServer is the server API for ExcelGenService service.
// All implementations must embed UnimplementedExcelGenServiceServer
// for forward compatibility.
type ExcelGenServiceServer interface {
	GeneralGenerate(context.Context, *ExcelGeneralRequest) (*ExcelGenResponse, error)
	Generate(context.Context, *ExcelGenRequest) (*ExcelGenResponse, error)
	GetStatus(context.Context, *ExcelGenStatusRequest) (*ExcelGenResponse, error)
	mustEmbedUnimplementedExcelGenServiceServer()
}

// UnimplementedExcelGenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExcelGenServiceServer struct{}

func (UnimplementedExcelGenServiceServer) GeneralGenerate(context.Context, *ExcelGeneralRequest) (*ExcelGenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneralGenerate not implemented")
}
func (UnimplementedExcelGenServiceServer) Generate(context.Context, *ExcelGenRequest) (*ExcelGenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedExcelGenServiceServer) GetStatus(context.Context, *ExcelGenStatusRequest) (*ExcelGenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedExcelGenServiceServer) mustEmbedUnimplementedExcelGenServiceServer() {}
func (UnimplementedExcelGenServiceServer) testEmbeddedByValue()                         {}

// UnsafeExcelGenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExcelGenServiceServer will
// result in compilation errors.
type UnsafeExcelGenServiceServer interface {
	mustEmbedUnimplementedExcelGenServiceServer()
}

func RegisterExcelGenServiceServer(s grpc.ServiceRegistrar, srv ExcelGenServiceServer) {
	// If the following call pancis, it indicates UnimplementedExcelGenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExcelGenService_ServiceDesc, srv)
}

func _ExcelGenService_GeneralGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExcelGeneralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelGenServiceServer).GeneralGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExcelGenService_GeneralGenerate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelGenServiceServer).GeneralGenerate(ctx, req.(*ExcelGeneralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExcelGenService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExcelGenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelGenServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExcelGenService_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelGenServiceServer).Generate(ctx, req.(*ExcelGenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExcelGenService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExcelGenStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelGenServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExcelGenService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelGenServiceServer).GetStatus(ctx, req.(*ExcelGenStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExcelGenService_ServiceDesc is the grpc.ServiceDesc for ExcelGenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExcelGenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "excel_gen.ExcelGenService",
	HandlerType: (*ExcelGenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeneralGenerate",
			Handler:    _ExcelGenService_GeneralGenerate_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _ExcelGenService_Generate_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _ExcelGenService_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/excel_gen/excel_gen.proto",
}
