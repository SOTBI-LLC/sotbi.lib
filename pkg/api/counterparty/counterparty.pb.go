// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.32.1
// source: counterparty/counterparty.proto

package counterparty

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CounterpartiesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Counterparty        `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CounterpartiesResponse) Reset() {
	*x = CounterpartiesResponse{}
	mi := &file_counterparty_counterparty_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CounterpartiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterpartiesResponse) ProtoMessage() {}

func (x *CounterpartiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_counterparty_counterparty_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterpartiesResponse.ProtoReflect.Descriptor instead.
func (*CounterpartiesResponse) Descriptor() ([]byte, []int) {
	return file_counterparty_counterparty_proto_rawDescGZIP(), []int{0}
}

func (x *CounterpartiesResponse) GetItems() []*Counterparty {
	if x != nil {
		return x.Items
	}
	return nil
}

type Link struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_counterparty_counterparty_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_counterparty_counterparty_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_counterparty_counterparty_proto_rawDescGZIP(), []int{1}
}

func (x *Link) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Link) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Контрагент
type Counterparty struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ID              int64                  `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Kind            bool                   `protobuf:"varint,3,opt,name=Kind,json=kind,proto3" json:"Kind,omitempty"`                   // ЮЛ/ФЛ
	Name            string                 `protobuf:"bytes,6,opt,name=Name,json=name,proto3" json:"Name,omitempty"`                    // Краткое наименование
	FullName        *string                `protobuf:"bytes,9,opt,name=FullName,json=full_name,proto3,oneof" json:"FullName,omitempty"` // Полное наименование
	Alias           *string                `protobuf:"bytes,12,opt,name=Alias,json=alias,proto3,oneof" json:"Alias,omitempty"`          // Погоняло
	INN             string                 `protobuf:"bytes,15,opt,name=INN,json=inn,proto3" json:"INN,omitempty"`
	KPP             *string                `protobuf:"bytes,18,opt,name=KPP,json=kpp,proto3,oneof" json:"KPP,omitempty"`
	OGRN            *string                `protobuf:"bytes,21,opt,name=OGRN,json=ogrn,proto3,oneof" json:"OGRN,omitempty"`
	Address         *string                `protobuf:"bytes,24,opt,name=Address,json=address,proto3,oneof" json:"Address,omitempty"`                          // Юридический адрес
	PostAddress     *string                `protobuf:"bytes,27,opt,name=PostAddress,json=post_address,proto3,oneof" json:"PostAddress,omitempty"`             // Почтовый адрес
	Contacts        *string                `protobuf:"bytes,30,opt,name=Contacts,json=contacts,proto3,oneof" json:"Contacts,omitempty"`                       // Контакты
	Email           *string                `protobuf:"bytes,33,opt,name=Email,json=email,proto3,oneof" json:"Email,omitempty"`                                // Электронная почта
	CEO             *string                `protobuf:"bytes,36,opt,name=CEO,json=ceo,proto3,oneof" json:"CEO,omitempty"`                                      // Руководитель
	ChiefAccountant *string                `protobuf:"bytes,39,opt,name=ChiefAccountant,json=chief_accountant,proto3,oneof" json:"ChiefAccountant,omitempty"` // Главный бухгалтер
	Links           []*Link                `protobuf:"bytes,42,rep,name=links,proto3" json:"links,omitempty"`                                                 // Ссылки
	Access          []string               `protobuf:"bytes,45,rep,name=access,proto3" json:"access,omitempty"`                                               // Доступы
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,48,opt,name=CreatedAt,json=created_at,proto3,oneof" json:"CreatedAt,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,51,opt,name=UpdatedAt,json=updated_at,proto3,oneof" json:"UpdatedAt,omitempty"`
	DeletedAt       *timestamppb.Timestamp `protobuf:"bytes,54,opt,name=DeletedAt,json=deleted_at,proto3,oneof" json:"DeletedAt,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Counterparty) Reset() {
	*x = Counterparty{}
	mi := &file_counterparty_counterparty_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Counterparty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Counterparty) ProtoMessage() {}

func (x *Counterparty) ProtoReflect() protoreflect.Message {
	mi := &file_counterparty_counterparty_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Counterparty.ProtoReflect.Descriptor instead.
func (*Counterparty) Descriptor() ([]byte, []int) {
	return file_counterparty_counterparty_proto_rawDescGZIP(), []int{2}
}

func (x *Counterparty) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Counterparty) GetKind() bool {
	if x != nil {
		return x.Kind
	}
	return false
}

func (x *Counterparty) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Counterparty) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

func (x *Counterparty) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *Counterparty) GetINN() string {
	if x != nil {
		return x.INN
	}
	return ""
}

func (x *Counterparty) GetKPP() string {
	if x != nil && x.KPP != nil {
		return *x.KPP
	}
	return ""
}

func (x *Counterparty) GetOGRN() string {
	if x != nil && x.OGRN != nil {
		return *x.OGRN
	}
	return ""
}

func (x *Counterparty) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *Counterparty) GetPostAddress() string {
	if x != nil && x.PostAddress != nil {
		return *x.PostAddress
	}
	return ""
}

func (x *Counterparty) GetContacts() string {
	if x != nil && x.Contacts != nil {
		return *x.Contacts
	}
	return ""
}

func (x *Counterparty) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *Counterparty) GetCEO() string {
	if x != nil && x.CEO != nil {
		return *x.CEO
	}
	return ""
}

func (x *Counterparty) GetChiefAccountant() string {
	if x != nil && x.ChiefAccountant != nil {
		return *x.ChiefAccountant
	}
	return ""
}

func (x *Counterparty) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Counterparty) GetAccess() []string {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *Counterparty) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Counterparty) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Counterparty) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// Добавить контрагента
type AddCounterpartyRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Kind            bool                   `protobuf:"varint,3,opt,name=Kind,json=kind,proto3" json:"Kind,omitempty"`                   // ЮЛ/ФЛ
	Name            string                 `protobuf:"bytes,6,opt,name=Name,json=name,proto3" json:"Name,omitempty"`                    // Краткое наименование
	FullName        *string                `protobuf:"bytes,9,opt,name=FullName,json=full_name,proto3,oneof" json:"FullName,omitempty"` // Полное наименование
	Alias           *string                `protobuf:"bytes,12,opt,name=Alias,json=alias,proto3,oneof" json:"Alias,omitempty"`          // Погоняло
	INN             string                 `protobuf:"bytes,15,opt,name=INN,json=inn,proto3" json:"INN,omitempty"`
	KPP             *string                `protobuf:"bytes,18,opt,name=KPP,json=kpp,proto3,oneof" json:"KPP,omitempty"`
	OGRN            *string                `protobuf:"bytes,21,opt,name=OGRN,json=ogrn,proto3,oneof" json:"OGRN,omitempty"`
	Address         *string                `protobuf:"bytes,24,opt,name=Address,json=address,proto3,oneof" json:"Address,omitempty"`                          // Юридический адрес
	PostAddress     *string                `protobuf:"bytes,27,opt,name=PostAddress,json=post_address,proto3,oneof" json:"PostAddress,omitempty"`             // Почтовый адрес
	Contacts        *string                `protobuf:"bytes,30,opt,name=Contacts,json=contacts,proto3,oneof" json:"Contacts,omitempty"`                       // Контакты
	Email           *string                `protobuf:"bytes,33,opt,name=Email,json=email,proto3,oneof" json:"Email,omitempty"`                                // Электронная почта
	CEO             *string                `protobuf:"bytes,36,opt,name=CEO,json=ceo,proto3,oneof" json:"CEO,omitempty"`                                      // Руководитель
	ChiefAccountant *string                `protobuf:"bytes,39,opt,name=ChiefAccountant,json=chief_accountant,proto3,oneof" json:"ChiefAccountant,omitempty"` // Главный бухгалтер
	Links           []*Link                `protobuf:"bytes,42,rep,name=links,proto3" json:"links,omitempty"`                                                 // Ссылки
	Access          []string               `protobuf:"bytes,45,rep,name=access,proto3" json:"access,omitempty"`                                               // Доступы
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AddCounterpartyRequest) Reset() {
	*x = AddCounterpartyRequest{}
	mi := &file_counterparty_counterparty_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCounterpartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCounterpartyRequest) ProtoMessage() {}

func (x *AddCounterpartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_counterparty_counterparty_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCounterpartyRequest.ProtoReflect.Descriptor instead.
func (*AddCounterpartyRequest) Descriptor() ([]byte, []int) {
	return file_counterparty_counterparty_proto_rawDescGZIP(), []int{3}
}

func (x *AddCounterpartyRequest) GetKind() bool {
	if x != nil {
		return x.Kind
	}
	return false
}

func (x *AddCounterpartyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddCounterpartyRequest) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

func (x *AddCounterpartyRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *AddCounterpartyRequest) GetINN() string {
	if x != nil {
		return x.INN
	}
	return ""
}

func (x *AddCounterpartyRequest) GetKPP() string {
	if x != nil && x.KPP != nil {
		return *x.KPP
	}
	return ""
}

func (x *AddCounterpartyRequest) GetOGRN() string {
	if x != nil && x.OGRN != nil {
		return *x.OGRN
	}
	return ""
}

func (x *AddCounterpartyRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *AddCounterpartyRequest) GetPostAddress() string {
	if x != nil && x.PostAddress != nil {
		return *x.PostAddress
	}
	return ""
}

func (x *AddCounterpartyRequest) GetContacts() string {
	if x != nil && x.Contacts != nil {
		return *x.Contacts
	}
	return ""
}

func (x *AddCounterpartyRequest) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *AddCounterpartyRequest) GetCEO() string {
	if x != nil && x.CEO != nil {
		return *x.CEO
	}
	return ""
}

func (x *AddCounterpartyRequest) GetChiefAccountant() string {
	if x != nil && x.ChiefAccountant != nil {
		return *x.ChiefAccountant
	}
	return ""
}

func (x *AddCounterpartyRequest) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *AddCounterpartyRequest) GetAccess() []string {
	if x != nil {
		return x.Access
	}
	return nil
}

// Отредактировать контрагента
type UpdateCounterpartyRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Kind            bool                   `protobuf:"varint,3,opt,name=Kind,json=kind,proto3" json:"Kind,omitempty"`                   // ЮЛ/ФЛ
	Name            string                 `protobuf:"bytes,6,opt,name=Name,json=name,proto3" json:"Name,omitempty"`                    // Краткое наименование
	FullName        *string                `protobuf:"bytes,9,opt,name=FullName,json=full_name,proto3,oneof" json:"FullName,omitempty"` // Полное наименование
	Alias           *string                `protobuf:"bytes,12,opt,name=Alias,json=alias,proto3,oneof" json:"Alias,omitempty"`          // Погоняло
	INN             string                 `protobuf:"bytes,15,opt,name=INN,json=inn,proto3" json:"INN,omitempty"`
	KPP             *string                `protobuf:"bytes,18,opt,name=KPP,json=kpp,proto3,oneof" json:"KPP,omitempty"`
	OGRN            *string                `protobuf:"bytes,21,opt,name=OGRN,json=ogrn,proto3,oneof" json:"OGRN,omitempty"`
	Address         *string                `protobuf:"bytes,24,opt,name=Address,json=address,proto3,oneof" json:"Address,omitempty"`                          // Юридический адрес
	PostAddress     *string                `protobuf:"bytes,27,opt,name=PostAddress,json=post_address,proto3,oneof" json:"PostAddress,omitempty"`             // Почтовый адрес
	Contacts        *string                `protobuf:"bytes,30,opt,name=Contacts,json=contacts,proto3,oneof" json:"Contacts,omitempty"`                       // Контакты
	Email           *string                `protobuf:"bytes,33,opt,name=Email,json=email,proto3,oneof" json:"Email,omitempty"`                                // Электронная почта
	CEO             *string                `protobuf:"bytes,36,opt,name=CEO,json=ceo,proto3,oneof" json:"CEO,omitempty"`                                      // Руководитель
	ChiefAccountant *string                `protobuf:"bytes,39,opt,name=ChiefAccountant,json=chief_accountant,proto3,oneof" json:"ChiefAccountant,omitempty"` // Главный бухгалтер
	Links           []*Link                `protobuf:"bytes,42,rep,name=links,proto3" json:"links,omitempty"`                                                 // Ссылки
	Access          []string               `protobuf:"bytes,45,rep,name=access,proto3" json:"access,omitempty"`                                               // Доступы
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateCounterpartyRequest) Reset() {
	*x = UpdateCounterpartyRequest{}
	mi := &file_counterparty_counterparty_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCounterpartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCounterpartyRequest) ProtoMessage() {}

func (x *UpdateCounterpartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_counterparty_counterparty_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCounterpartyRequest.ProtoReflect.Descriptor instead.
func (*UpdateCounterpartyRequest) Descriptor() ([]byte, []int) {
	return file_counterparty_counterparty_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCounterpartyRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCounterpartyRequest) GetKind() bool {
	if x != nil {
		return x.Kind
	}
	return false
}

func (x *UpdateCounterpartyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCounterpartyRequest) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

func (x *UpdateCounterpartyRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *UpdateCounterpartyRequest) GetINN() string {
	if x != nil {
		return x.INN
	}
	return ""
}

func (x *UpdateCounterpartyRequest) GetKPP() string {
	if x != nil && x.KPP != nil {
		return *x.KPP
	}
	return ""
}

func (x *UpdateCounterpartyRequest) GetOGRN() string {
	if x != nil && x.OGRN != nil {
		return *x.OGRN
	}
	return ""
}

func (x *UpdateCounterpartyRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *UpdateCounterpartyRequest) GetPostAddress() string {
	if x != nil && x.PostAddress != nil {
		return *x.PostAddress
	}
	return ""
}

func (x *UpdateCounterpartyRequest) GetContacts() string {
	if x != nil && x.Contacts != nil {
		return *x.Contacts
	}
	return ""
}

func (x *UpdateCounterpartyRequest) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *UpdateCounterpartyRequest) GetCEO() string {
	if x != nil && x.CEO != nil {
		return *x.CEO
	}
	return ""
}

func (x *UpdateCounterpartyRequest) GetChiefAccountant() string {
	if x != nil && x.ChiefAccountant != nil {
		return *x.ChiefAccountant
	}
	return ""
}

func (x *UpdateCounterpartyRequest) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *UpdateCounterpartyRequest) GetAccess() []string {
	if x != nil {
		return x.Access
	}
	return nil
}

var File_counterparty_counterparty_proto protoreflect.FileDescriptor

var file_counterparty_counterparty_proto_rawDesc = string([]byte{
	0x0a, 0x1f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x4a, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x2c, 0x0a,
	0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc3, 0x06, 0x0a, 0x0c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x9a, 0x02, 0x01,
	0x03, 0xa2, 0x02, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x4e, 0x4e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x6e, 0x6e, 0x12, 0x15, 0x0a, 0x03, 0x4b, 0x50, 0x50, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x03, 0x6b, 0x70, 0x70, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4f,
	0x47, 0x52, 0x4e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x6f, 0x67, 0x72,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x43, 0x45, 0x4f, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x03, 0x63, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x0f, 0x43, 0x68, 0x69, 0x65, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x6e,
	0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x10, 0x63, 0x68, 0x69, 0x65, 0x66,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3e, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x0a, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x0b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x0c, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x4b, 0x50, 0x50, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x4f, 0x47, 0x52, 0x4e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x43, 0x45, 0x4f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x43, 0x68, 0x69, 0x65, 0x66, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xc2, 0x04, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x4e, 0x4e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x6e, 0x6e, 0x12, 0x15, 0x0a, 0x03, 0x4b, 0x50, 0x50, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x03, 0x6b, 0x70, 0x70, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4f, 0x47,
	0x52, 0x4e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x6f, 0x67, 0x72, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x43, 0x45, 0x4f, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x03, 0x63, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x0f, 0x43, 0x68, 0x69, 0x65, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x10, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x4b, 0x50, 0x50, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x4f, 0x47, 0x52, 0x4e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x43,
	0x45, 0x4f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x43, 0x68, 0x69, 0x65, 0x66, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x6e, 0x74, 0x22, 0xfe, 0x04, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x12, 0x92, 0x41, 0x0c, 0x9a, 0x02, 0x01, 0x03, 0xa2, 0x02, 0x05, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x03, 0x49, 0x4e, 0x4e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x78,
	0x0c, 0x80, 0x01, 0x0a, 0x8a, 0x01, 0x08, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52,
	0x03, 0x69, 0x6e, 0x6e, 0x12, 0x15, 0x0a, 0x03, 0x4b, 0x50, 0x50, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x03, 0x6b, 0x70, 0x70, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4f,
	0x47, 0x52, 0x4e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x6f, 0x67, 0x72,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x43, 0x45, 0x4f, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x03, 0x63, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x0f, 0x43, 0x68, 0x69, 0x65, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x6e,
	0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x10, 0x63, 0x68, 0x69, 0x65, 0x66,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x4b, 0x50, 0x50, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x4f, 0x47, 0x52, 0x4e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x43, 0x45, 0x4f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x43, 0x68, 0x69, 0x65, 0x66, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x4f, 0x54, 0x42, 0x49, 0x2d, 0x4c, 0x4c, 0x43, 0x2f,
	0x73, 0x6f, 0x74, 0x62, 0x69, 0x2e, 0x6c, 0x69, 0x62, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_counterparty_counterparty_proto_rawDescOnce sync.Once
	file_counterparty_counterparty_proto_rawDescData []byte
)

func file_counterparty_counterparty_proto_rawDescGZIP() []byte {
	file_counterparty_counterparty_proto_rawDescOnce.Do(func() {
		file_counterparty_counterparty_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_counterparty_counterparty_proto_rawDesc), len(file_counterparty_counterparty_proto_rawDesc)))
	})
	return file_counterparty_counterparty_proto_rawDescData
}

var file_counterparty_counterparty_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_counterparty_counterparty_proto_goTypes = []any{
	(*CounterpartiesResponse)(nil),    // 0: counterparty.CounterpartiesResponse
	(*Link)(nil),                      // 1: counterparty.Link
	(*Counterparty)(nil),              // 2: counterparty.Counterparty
	(*AddCounterpartyRequest)(nil),    // 3: counterparty.AddCounterpartyRequest
	(*UpdateCounterpartyRequest)(nil), // 4: counterparty.UpdateCounterpartyRequest
	(*timestamppb.Timestamp)(nil),     // 5: google.protobuf.Timestamp
}
var file_counterparty_counterparty_proto_depIdxs = []int32{
	2, // 0: counterparty.CounterpartiesResponse.items:type_name -> counterparty.Counterparty
	1, // 1: counterparty.Counterparty.links:type_name -> counterparty.Link
	5, // 2: counterparty.Counterparty.CreatedAt:type_name -> google.protobuf.Timestamp
	5, // 3: counterparty.Counterparty.UpdatedAt:type_name -> google.protobuf.Timestamp
	5, // 4: counterparty.Counterparty.DeletedAt:type_name -> google.protobuf.Timestamp
	1, // 5: counterparty.AddCounterpartyRequest.links:type_name -> counterparty.Link
	1, // 6: counterparty.UpdateCounterpartyRequest.links:type_name -> counterparty.Link
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_counterparty_counterparty_proto_init() }
func file_counterparty_counterparty_proto_init() {
	if File_counterparty_counterparty_proto != nil {
		return
	}
	file_counterparty_counterparty_proto_msgTypes[2].OneofWrappers = []any{}
	file_counterparty_counterparty_proto_msgTypes[3].OneofWrappers = []any{}
	file_counterparty_counterparty_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_counterparty_counterparty_proto_rawDesc), len(file_counterparty_counterparty_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_counterparty_counterparty_proto_goTypes,
		DependencyIndexes: file_counterparty_counterparty_proto_depIdxs,
		MessageInfos:      file_counterparty_counterparty_proto_msgTypes,
	}.Build()
	File_counterparty_counterparty_proto = out.File
	file_counterparty_counterparty_proto_goTypes = nil
	file_counterparty_counterparty_proto_depIdxs = nil
}
