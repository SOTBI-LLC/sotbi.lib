// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: counterparty/service.proto

package counterparty

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Counterparties_GetCounterparties_FullMethodName              = "/counterparty.Counterparties/GetCounterparties"
	Counterparties_CreateCounterparty_FullMethodName             = "/counterparty.Counterparties/CreateCounterparty"
	Counterparties_GetCounterpartiesStream_FullMethodName        = "/counterparty.Counterparties/GetCounterpartiesStream"
	Counterparties_GetCounterpartyByID_FullMethodName            = "/counterparty.Counterparties/GetCounterpartyByID"
	Counterparties_ArchiveCounterparty_FullMethodName            = "/counterparty.Counterparties/ArchiveCounterparty"
	Counterparties_UpdateCounterparty_FullMethodName             = "/counterparty.Counterparties/UpdateCounterparty"
	Counterparties_GetBankDetailsByCounterpartyID_FullMethodName = "/counterparty.Counterparties/GetBankDetailsByCounterpartyID"
	Counterparties_UpdateBankDetails_FullMethodName              = "/counterparty.Counterparties/UpdateBankDetails"
	Counterparties_GetEmployeesByCounterpartyID_FullMethodName   = "/counterparty.Counterparties/GetEmployeesByCounterpartyID"
	Counterparties_GetEmployeesByUserID_FullMethodName           = "/counterparty.Counterparties/GetEmployeesByUserID"
	Counterparties_UpdateEmployees_FullMethodName                = "/counterparty.Counterparties/UpdateEmployees"
	Counterparties_UpdateEmployeesByUserID_FullMethodName        = "/counterparty.Counterparties/UpdateEmployeesByUserID"
	Counterparties_GetRules_FullMethodName                       = "/counterparty.Counterparties/GetRules"
	Counterparties_UpdateRules_FullMethodName                    = "/counterparty.Counterparties/UpdateRules"
)

// CounterpartiesClient is the client API for Counterparties service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CounterpartiesClient interface {
	// Получить спсок контрагентов
	GetCounterparties(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CounterpartiesResponse, error)
	// Создать контрагента
	CreateCounterparty(ctx context.Context, in *AddCounterpartyRequest, opts ...grpc.CallOption) (*Counterparty, error)
	// Получить спсок контрагентов (stream)
	GetCounterpartiesStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Counterparty], error)
	// Получить контрагента по ID
	GetCounterpartyByID(ctx context.Context, in *CounterpartyID, opts ...grpc.CallOption) (*Counterparty, error)
	// Архивировать контрагента
	ArchiveCounterparty(ctx context.Context, in *CounterpartyID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Отредактировать контрагента
	UpdateCounterparty(ctx context.Context, in *UpdateCounterpartyRequest, opts ...grpc.CallOption) (*Counterparty, error)
	// Получить банковские реквизиты контрагента по ID контрагента
	GetBankDetailsByCounterpartyID(ctx context.Context, in *CounterpartyID, opts ...grpc.CallOption) (*BankDetailsResponse, error)
	// Отредактировать банковские счета контрагента
	UpdateBankDetails(ctx context.Context, in *UpdateBankDetailsRequest, opts ...grpc.CallOption) (*BankDetailsResponse, error)
	// Получить список всех работников контрагента по ID контрагента
	GetEmployeesByCounterpartyID(ctx context.Context, in *CounterpartyID, opts ...grpc.CallOption) (*EmployeesResponse, error)
	// Получить список всех работников по user_id
	GetEmployeesByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*EmployeesResponse, error)
	// Отредактировать список работников контрагента
	UpdateEmployees(ctx context.Context, in *UpdateEmployeesRequest, opts ...grpc.CallOption) (*EmployeesResponse, error)
	// Отредактировать список всех работников по user_id
	UpdateEmployeesByUserID(ctx context.Context, in *UpdateEmployeesRequest, opts ...grpc.CallOption) (*EmployeesResponse, error)
	// Получить правила авторизации для контрагентов
	GetRules(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthMessage, error)
	UpdateRules(ctx context.Context, in *AuthMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type counterpartiesClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterpartiesClient(cc grpc.ClientConnInterface) CounterpartiesClient {
	return &counterpartiesClient{cc}
}

func (c *counterpartiesClient) GetCounterparties(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CounterpartiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CounterpartiesResponse)
	err := c.cc.Invoke(ctx, Counterparties_GetCounterparties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartiesClient) CreateCounterparty(ctx context.Context, in *AddCounterpartyRequest, opts ...grpc.CallOption) (*Counterparty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Counterparty)
	err := c.cc.Invoke(ctx, Counterparties_CreateCounterparty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartiesClient) GetCounterpartiesStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Counterparty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Counterparties_ServiceDesc.Streams[0], Counterparties_GetCounterpartiesStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Counterparty]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Counterparties_GetCounterpartiesStreamClient = grpc.ServerStreamingClient[Counterparty]

func (c *counterpartiesClient) GetCounterpartyByID(ctx context.Context, in *CounterpartyID, opts ...grpc.CallOption) (*Counterparty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Counterparty)
	err := c.cc.Invoke(ctx, Counterparties_GetCounterpartyByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartiesClient) ArchiveCounterparty(ctx context.Context, in *CounterpartyID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Counterparties_ArchiveCounterparty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartiesClient) UpdateCounterparty(ctx context.Context, in *UpdateCounterpartyRequest, opts ...grpc.CallOption) (*Counterparty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Counterparty)
	err := c.cc.Invoke(ctx, Counterparties_UpdateCounterparty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartiesClient) GetBankDetailsByCounterpartyID(ctx context.Context, in *CounterpartyID, opts ...grpc.CallOption) (*BankDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BankDetailsResponse)
	err := c.cc.Invoke(ctx, Counterparties_GetBankDetailsByCounterpartyID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartiesClient) UpdateBankDetails(ctx context.Context, in *UpdateBankDetailsRequest, opts ...grpc.CallOption) (*BankDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BankDetailsResponse)
	err := c.cc.Invoke(ctx, Counterparties_UpdateBankDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartiesClient) GetEmployeesByCounterpartyID(ctx context.Context, in *CounterpartyID, opts ...grpc.CallOption) (*EmployeesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeesResponse)
	err := c.cc.Invoke(ctx, Counterparties_GetEmployeesByCounterpartyID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartiesClient) GetEmployeesByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*EmployeesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeesResponse)
	err := c.cc.Invoke(ctx, Counterparties_GetEmployeesByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartiesClient) UpdateEmployees(ctx context.Context, in *UpdateEmployeesRequest, opts ...grpc.CallOption) (*EmployeesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeesResponse)
	err := c.cc.Invoke(ctx, Counterparties_UpdateEmployees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartiesClient) UpdateEmployeesByUserID(ctx context.Context, in *UpdateEmployeesRequest, opts ...grpc.CallOption) (*EmployeesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeesResponse)
	err := c.cc.Invoke(ctx, Counterparties_UpdateEmployeesByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartiesClient) GetRules(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthMessage)
	err := c.cc.Invoke(ctx, Counterparties_GetRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartiesClient) UpdateRules(ctx context.Context, in *AuthMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Counterparties_UpdateRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterpartiesServer is the server API for Counterparties service.
// All implementations must embed UnimplementedCounterpartiesServer
// for forward compatibility.
type CounterpartiesServer interface {
	// Получить спсок контрагентов
	GetCounterparties(context.Context, *emptypb.Empty) (*CounterpartiesResponse, error)
	// Создать контрагента
	CreateCounterparty(context.Context, *AddCounterpartyRequest) (*Counterparty, error)
	// Получить спсок контрагентов (stream)
	GetCounterpartiesStream(*emptypb.Empty, grpc.ServerStreamingServer[Counterparty]) error
	// Получить контрагента по ID
	GetCounterpartyByID(context.Context, *CounterpartyID) (*Counterparty, error)
	// Архивировать контрагента
	ArchiveCounterparty(context.Context, *CounterpartyID) (*emptypb.Empty, error)
	// Отредактировать контрагента
	UpdateCounterparty(context.Context, *UpdateCounterpartyRequest) (*Counterparty, error)
	// Получить банковские реквизиты контрагента по ID контрагента
	GetBankDetailsByCounterpartyID(context.Context, *CounterpartyID) (*BankDetailsResponse, error)
	// Отредактировать банковские счета контрагента
	UpdateBankDetails(context.Context, *UpdateBankDetailsRequest) (*BankDetailsResponse, error)
	// Получить список всех работников контрагента по ID контрагента
	GetEmployeesByCounterpartyID(context.Context, *CounterpartyID) (*EmployeesResponse, error)
	// Получить список всех работников по user_id
	GetEmployeesByUserID(context.Context, *UserID) (*EmployeesResponse, error)
	// Отредактировать список работников контрагента
	UpdateEmployees(context.Context, *UpdateEmployeesRequest) (*EmployeesResponse, error)
	// Отредактировать список всех работников по user_id
	UpdateEmployeesByUserID(context.Context, *UpdateEmployeesRequest) (*EmployeesResponse, error)
	// Получить правила авторизации для контрагентов
	GetRules(context.Context, *emptypb.Empty) (*AuthMessage, error)
	UpdateRules(context.Context, *AuthMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedCounterpartiesServer()
}

// UnimplementedCounterpartiesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCounterpartiesServer struct{}

func (UnimplementedCounterpartiesServer) GetCounterparties(context.Context, *emptypb.Empty) (*CounterpartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounterparties not implemented")
}
func (UnimplementedCounterpartiesServer) CreateCounterparty(context.Context, *AddCounterpartyRequest) (*Counterparty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCounterparty not implemented")
}
func (UnimplementedCounterpartiesServer) GetCounterpartiesStream(*emptypb.Empty, grpc.ServerStreamingServer[Counterparty]) error {
	return status.Errorf(codes.Unimplemented, "method GetCounterpartiesStream not implemented")
}
func (UnimplementedCounterpartiesServer) GetCounterpartyByID(context.Context, *CounterpartyID) (*Counterparty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounterpartyByID not implemented")
}
func (UnimplementedCounterpartiesServer) ArchiveCounterparty(context.Context, *CounterpartyID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveCounterparty not implemented")
}
func (UnimplementedCounterpartiesServer) UpdateCounterparty(context.Context, *UpdateCounterpartyRequest) (*Counterparty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCounterparty not implemented")
}
func (UnimplementedCounterpartiesServer) GetBankDetailsByCounterpartyID(context.Context, *CounterpartyID) (*BankDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankDetailsByCounterpartyID not implemented")
}
func (UnimplementedCounterpartiesServer) UpdateBankDetails(context.Context, *UpdateBankDetailsRequest) (*BankDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankDetails not implemented")
}
func (UnimplementedCounterpartiesServer) GetEmployeesByCounterpartyID(context.Context, *CounterpartyID) (*EmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeesByCounterpartyID not implemented")
}
func (UnimplementedCounterpartiesServer) GetEmployeesByUserID(context.Context, *UserID) (*EmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeesByUserID not implemented")
}
func (UnimplementedCounterpartiesServer) UpdateEmployees(context.Context, *UpdateEmployeesRequest) (*EmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployees not implemented")
}
func (UnimplementedCounterpartiesServer) UpdateEmployeesByUserID(context.Context, *UpdateEmployeesRequest) (*EmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployeesByUserID not implemented")
}
func (UnimplementedCounterpartiesServer) GetRules(context.Context, *emptypb.Empty) (*AuthMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRules not implemented")
}
func (UnimplementedCounterpartiesServer) UpdateRules(context.Context, *AuthMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRules not implemented")
}
func (UnimplementedCounterpartiesServer) mustEmbedUnimplementedCounterpartiesServer() {}
func (UnimplementedCounterpartiesServer) testEmbeddedByValue()                        {}

// UnsafeCounterpartiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterpartiesServer will
// result in compilation errors.
type UnsafeCounterpartiesServer interface {
	mustEmbedUnimplementedCounterpartiesServer()
}

func RegisterCounterpartiesServer(s grpc.ServiceRegistrar, srv CounterpartiesServer) {
	// If the following call pancis, it indicates UnimplementedCounterpartiesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Counterparties_ServiceDesc, srv)
}

func _Counterparties_GetCounterparties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartiesServer).GetCounterparties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counterparties_GetCounterparties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartiesServer).GetCounterparties(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counterparties_CreateCounterparty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCounterpartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartiesServer).CreateCounterparty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counterparties_CreateCounterparty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartiesServer).CreateCounterparty(ctx, req.(*AddCounterpartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counterparties_GetCounterpartiesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CounterpartiesServer).GetCounterpartiesStream(m, &grpc.GenericServerStream[emptypb.Empty, Counterparty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Counterparties_GetCounterpartiesStreamServer = grpc.ServerStreamingServer[Counterparty]

func _Counterparties_GetCounterpartyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterpartyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartiesServer).GetCounterpartyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counterparties_GetCounterpartyByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartiesServer).GetCounterpartyByID(ctx, req.(*CounterpartyID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counterparties_ArchiveCounterparty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterpartyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartiesServer).ArchiveCounterparty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counterparties_ArchiveCounterparty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartiesServer).ArchiveCounterparty(ctx, req.(*CounterpartyID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counterparties_UpdateCounterparty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCounterpartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartiesServer).UpdateCounterparty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counterparties_UpdateCounterparty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartiesServer).UpdateCounterparty(ctx, req.(*UpdateCounterpartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counterparties_GetBankDetailsByCounterpartyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterpartyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartiesServer).GetBankDetailsByCounterpartyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counterparties_GetBankDetailsByCounterpartyID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartiesServer).GetBankDetailsByCounterpartyID(ctx, req.(*CounterpartyID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counterparties_UpdateBankDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartiesServer).UpdateBankDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counterparties_UpdateBankDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartiesServer).UpdateBankDetails(ctx, req.(*UpdateBankDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counterparties_GetEmployeesByCounterpartyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterpartyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartiesServer).GetEmployeesByCounterpartyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counterparties_GetEmployeesByCounterpartyID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartiesServer).GetEmployeesByCounterpartyID(ctx, req.(*CounterpartyID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counterparties_GetEmployeesByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartiesServer).GetEmployeesByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counterparties_GetEmployeesByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartiesServer).GetEmployeesByUserID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counterparties_UpdateEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartiesServer).UpdateEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counterparties_UpdateEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartiesServer).UpdateEmployees(ctx, req.(*UpdateEmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counterparties_UpdateEmployeesByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartiesServer).UpdateEmployeesByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counterparties_UpdateEmployeesByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartiesServer).UpdateEmployeesByUserID(ctx, req.(*UpdateEmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counterparties_GetRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartiesServer).GetRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counterparties_GetRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartiesServer).GetRules(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counterparties_UpdateRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartiesServer).UpdateRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counterparties_UpdateRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartiesServer).UpdateRules(ctx, req.(*AuthMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Counterparties_ServiceDesc is the grpc.ServiceDesc for Counterparties service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Counterparties_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "counterparty.Counterparties",
	HandlerType: (*CounterpartiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCounterparties",
			Handler:    _Counterparties_GetCounterparties_Handler,
		},
		{
			MethodName: "CreateCounterparty",
			Handler:    _Counterparties_CreateCounterparty_Handler,
		},
		{
			MethodName: "GetCounterpartyByID",
			Handler:    _Counterparties_GetCounterpartyByID_Handler,
		},
		{
			MethodName: "ArchiveCounterparty",
			Handler:    _Counterparties_ArchiveCounterparty_Handler,
		},
		{
			MethodName: "UpdateCounterparty",
			Handler:    _Counterparties_UpdateCounterparty_Handler,
		},
		{
			MethodName: "GetBankDetailsByCounterpartyID",
			Handler:    _Counterparties_GetBankDetailsByCounterpartyID_Handler,
		},
		{
			MethodName: "UpdateBankDetails",
			Handler:    _Counterparties_UpdateBankDetails_Handler,
		},
		{
			MethodName: "GetEmployeesByCounterpartyID",
			Handler:    _Counterparties_GetEmployeesByCounterpartyID_Handler,
		},
		{
			MethodName: "GetEmployeesByUserID",
			Handler:    _Counterparties_GetEmployeesByUserID_Handler,
		},
		{
			MethodName: "UpdateEmployees",
			Handler:    _Counterparties_UpdateEmployees_Handler,
		},
		{
			MethodName: "UpdateEmployeesByUserID",
			Handler:    _Counterparties_UpdateEmployeesByUserID_Handler,
		},
		{
			MethodName: "GetRules",
			Handler:    _Counterparties_GetRules_Handler,
		},
		{
			MethodName: "UpdateRules",
			Handler:    _Counterparties_UpdateRules_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCounterpartiesStream",
			Handler:       _Counterparties_GetCounterpartiesStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "counterparty/service.proto",
}
